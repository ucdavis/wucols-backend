# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - wucols-proxy
      - azure-pipelines-proxy.yml
    exclude:
      - wucols-export
      - azure-pipelines-export.yml

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: "UC Davis CAES Production"

  # Function app name
  functionAppName: "wucols-proxy"

  # Agent VM image name
  vmImageName: "ubuntu-latest"

  # Working Directory
  workingDirectory: "$(System.DefaultWorkingDirectory)/wucols-proxy"

stages:
  - stage: Build
    displayName: Build stage

    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)

        steps:
          - task: DotNetCoreCLI@2
            displayName: Restore
            inputs:
              command: "restore"
              projects: |
                $(workingDirectory)/*.csproj

          - task: DotNetCoreCLI@2
            displayName: Build
            inputs:
              command: "build"
              projects: |
                $(workingDirectory)/*.csproj
              arguments: --configuration Release --no-restore

          - task: DotNetCoreCLI@2
            displayName: Publish
            inputs:
              command: "publish"
              publishWebProjects: false
              projects: |
                $(workingDirectory)/*.csproj
              arguments: --configuration Release --output $(System.DefaultWorkingDirectory)/publish_output --no-build

          - task: ArchiveFiles@2
            displayName: "Archive files"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/publish_output"
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true

          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            artifact: drop

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

    jobs:
      - deployment: Deploy
        displayName: Deploy
        environment: "development"
        pool:
          vmImage: $(vmImageName)

        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureFunctionApp@1
                  displayName: "Azure functions app deploy"
                  inputs:
                    azureSubscription: "$(azureSubscription)"
                    appType: functionAppLinux
                    appName: $(functionAppName)
                    package: "$(Pipeline.Workspace)/drop/$(Build.BuildId).zip"
                    runtimeStack: "DOTNET-ISOLATED|8.0"
